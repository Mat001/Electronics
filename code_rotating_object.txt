Example 1
Rotating object

Adopted idea with original code:
Sketch from RGB Cube example in Processing (File-Examples-3D-Form-RGBcube).
Wiring is exactly the same as on this website: http://fritzing.org/projects/virtual-color-mixer/

********************************************************
Arduino code
********************************************************

Install arduino library into Processing and then upload Firmata library to arduino. Instructions here: 
http://www.arduino.cc/playground/Interfacing/Processing

Uploading StandardFirmata to Arduino:
Go to File-Examples-Firmata-Standard Firmata. Compile (play button) and Upload.
Then run the sketch below in Processing.

Because of Firmata no Arduino code is needed (Firmata does the job).


********************************************************
Processing code
********************************************************


 /**Middle pins of potentiometers go into analog pin 0,1 and 2. 
  * other pins in ground and 5V. Use breadboard.
  * Runs with Firmata (need to upload Standard Firmata to Arduino).
  */
 
import processing.serial.*; // reference the serial library

import cc.arduino.*; // reference the arduino library

Arduino arduino; // create a variable arduino of the Arduino data type
 
float xmag, ymag = 0;
float newXmag, newYmag = 0;
//float flash;
 
void setup() 
{ 
  size(640, 360, P3D); 
  noStroke(); 
  colorMode(RGB, 1); 
  
println(Serial.list()); // List the all available serial ports:
arduino = new Arduino(this, Arduino.list()[0], 57600); 

} 

void draw() 
{ 
  background(60);
  
  pushMatrix(); 
 
  translate(width/2, height/2, -30); 
  
  newXmag = arduino.analogRead(0)*2/float(width) * TWO_PI;
  newYmag = arduino.analogRead(1)*2/float(height) * TWO_PI;
  
  float diff = xmag-newXmag;
  if (abs(diff) >  0.01) { xmag -= diff/4.0; }
  
  diff = ymag-newYmag;
  if (abs(diff) >  0.01) { ymag -= diff/4.0; }
  
  rotateX(-ymag); 
  rotateY(-xmag); 
  
  scale(arduino.analogRead(2)/15);    // It scales up/down according to the mouse/potentiometer movement.
  //flash = random(1.5);
 
  beginShape(QUADS);

// right hand side

  fill(1, 1, 0); vertex(3,-1,0);
  fill(1, 1, 0); vertex(3,0,-1);
  fill(1, 1, 0); vertex(3,1,0);
  fill(1, 1, 0); vertex(3,0,1);
    
  // lower
  fill(1, 1, 0); vertex(1,3,0);
  fill(1, 1, 0); vertex(0,3,1);
  fill(1, 1, 0); vertex(-1,3,0);
  fill(1, 1, 0); vertex(0,3,-1);
  
  // left hand side
  fill(1, 1, 0); vertex(-3,0,1);
  fill(1, 1, 0); vertex(-3,1,0);
  fill(1, 1, 0); vertex(-3,0,-1);
  fill(1, 1, 0); vertex(-3,-1,0);
  
  // upper
  fill(1, 1, 0); vertex(1,-3,0);
  fill(1, 1, 0); vertex(0,-3,1);
  fill(1, 1, 0); vertex(-1,-3,0);
  fill(1, 1, 0); vertex(0,-3,-1);
  
  // z-axis front
  fill(1, 1, 0); vertex(1,0,2);
  fill(1, 1, 0); vertex(0,1,2);
  fill(1, 1, 0); vertex(-1,0,2);
  fill(1, 1, 0); vertex(0,-1,2);
  
  // z-axis back
  fill(1, 1, 0); vertex(1,0,-2);
  fill(1, 1, 0); vertex(0,1,-2);
  fill(1, 1, 0); vertex(-1,0,-2);
  fill(1, 1, 0); vertex(0,-1,-2);
    
  endShape();
  
  beginShape(TRIANGLES);

  // right hand side
  fill(1, 0, 0); vertex(3,0,1);
  fill(0, 0, 1); vertex(3,-1,0);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(3,-1,0);
  fill(0, 0, 1); vertex(3,0,-1);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(3,0,-1);
  fill(0, 0, 1); vertex(3,1,0);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(3,1,0);
  fill(0, 0, 1); vertex(3,0,1);
  fill(0, 0, 1); vertex(0,0,0);

  // lower
  fill(1, 0, 0); vertex(1,3,0);
  fill(0, 0, 1); vertex(0,3,1);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(0,3,1);
  fill(0, 0, 1); vertex(-1,3,0);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(-1,3,0);
  fill(0, 0, 1); vertex(0,3,-1);
  fill(0, 0, 1); vertex(0,0,0);

  fill(1, 0, 0); vertex(0,3,-1);
  fill(0, 0, 1); vertex(1,3,0);
  fill(0, 0, 1); vertex(0,0,0);  
  
  // left hand side
  fill(1, 0, 0); vertex(-3,0,1);
  fill(0, 0, 1); vertex(-3,1,0);
  fill(0, 0, 1); vertex(0,0,0);

  fill(1, 0, 0); vertex(-3,1,0);
  fill(0, 0, 1); vertex(-3,0,-1);
  fill(0, 0, 1); vertex(0,0,0);  
  
  fill(1, 0, 0); vertex(-3,0,-1);
  fill(0, 0, 1); vertex(-3,-1,0);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(-3,-1,0);
  fill(0, 0, 1); vertex(-3,0,1);
  fill(0, 0, 1); vertex(0,0,0);
  
  // upper
  fill(1, 0, 0); vertex(1,-3,0);
  fill(0, 0, 1); vertex(0,-3,1);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(0,-3,1);
  fill(0, 0, 1); vertex(-1,-3,0);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(-1,-3,0);
  fill(0, 0, 1); vertex(0,-3,-1);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(0,-3,-1);
  fill(0, 0, 1); vertex(1,-3,0);
  fill(0, 0, 1); vertex(0,0,0);
  
  // z-axis front
  fill(1, 0, 0); vertex(1,0,2);
  fill(0, 0, 1); vertex(0,1,2);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(0,1,2);
  fill(0, 0, 1); vertex(-1,0,2);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(-1,0,2);
  fill(0, 0, 1); vertex(0,-1,2);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(0,-1,2);
  fill(0, 0, 1); vertex(1,0,2);
  fill(0, 0, 1); vertex(0,0,0);
  
  // z-axis back
  fill(1, 0, 0); vertex(1,0,-2);
  fill(0, 0, 1); vertex(0,1,-2);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(0,1,-2);
  fill(0, 0, 1); vertex(-1,0,-2);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(-1,0,-2);
  fill(0, 0, 1); vertex(0,-1,-2);
  fill(0, 0, 1); vertex(0,0,0);
  
  fill(1, 0, 0); vertex(0,-1,-2);
  fill(0, 0, 1); vertex(1,0,-2);
  fill(0, 0, 1); vertex(0,0,0);
  
  endShape();
  
  popMatrix(); 
} 
